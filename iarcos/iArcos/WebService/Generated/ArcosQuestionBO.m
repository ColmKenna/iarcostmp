/*
	ArcosQuestionBO.h
	The implementation of properties and methods for the ArcosQuestionBO object.
	Generated by SudzC.com
*/
#import "ArcosQuestionBO.h"

@implementation ArcosQuestionBO
	@synthesize Weighting = _Weighting;
	@synthesize Active = _Active;
	@synthesize IUR = _IUR;
	@synthesize SurveyIUR = _SurveyIUR;
	@synthesize Sequence = _Sequence;
	@synthesize Narrative = _Narrative;
	@synthesize QuestionType = _QuestionType;
	@synthesize ViewAs = _ViewAs;
	@synthesize Tooltip = _Tooltip;
	@synthesize ProductIUR = _ProductIUR;
	@synthesize SectionNo = _SectionNo;
	@synthesize ResponseLimits = _ResponseLimits;

	- (id) init
	{
		if(self = [super init])
		{
			self.Narrative = nil;
			self.Tooltip = nil;
			self.ResponseLimits = nil;

		}
		return self;
	}

	+ (ArcosQuestionBO*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[[self alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.Weighting = [[Soap getNodeValue: node withName: @"Weighting"] intValue];
			self.Active = [[Soap getNodeValue: node withName: @"Active"] boolValue];
			self.IUR = [[Soap getNodeValue: node withName: @"IUR"] intValue];
			self.SurveyIUR = [[Soap getNodeValue: node withName: @"SurveyIUR"] intValue];
			self.Sequence = [[Soap getNodeValue: node withName: @"Sequence"] intValue];
			self.Narrative = [Soap getNodeValue: node withName: @"Narrative"];
			self.QuestionType = [[Soap getNodeValue: node withName: @"QuestionType"] intValue];
			self.ViewAs = [[Soap getNodeValue: node withName: @"ViewAs"] intValue];
			self.Tooltip = [Soap getNodeValue: node withName: @"Tooltip"];
			self.ProductIUR = [[Soap getNodeValue: node withName: @"ProductIUR"] intValue];
			self.SectionNo = [[Soap getNodeValue: node withName: @"SectionNo"] intValue];
			self.ResponseLimits = [Soap getNodeValue: node withName: @"ResponseLimits"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"QuestionBO"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<Weighting>%@</Weighting>", [NSString stringWithFormat: @"%i", self.Weighting]];
		[s appendFormat: @"<Active>%@</Active>", (self.Active)?@"true":@"false"];
		[s appendFormat: @"<IUR>%@</IUR>", [NSString stringWithFormat: @"%i", self.IUR]];
		[s appendFormat: @"<SurveyIUR>%@</SurveyIUR>", [NSString stringWithFormat: @"%i", self.SurveyIUR]];
		[s appendFormat: @"<Sequence>%@</Sequence>", [NSString stringWithFormat: @"%i", self.Sequence]];
		if (self.Narrative != nil) [s appendFormat: @"<Narrative>%@</Narrative>", [[self.Narrative stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<QuestionType>%@</QuestionType>", [NSString stringWithFormat: @"%i", self.QuestionType]];
		[s appendFormat: @"<ViewAs>%@</ViewAs>", [NSString stringWithFormat: @"%i", self.ViewAs]];
		if (self.Tooltip != nil) [s appendFormat: @"<Tooltip>%@</Tooltip>", [[self.Tooltip stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<ProductIUR>%@</ProductIUR>", [NSString stringWithFormat: @"%i", self.ProductIUR]];
		[s appendFormat: @"<SectionNo>%@</SectionNo>", [NSString stringWithFormat: @"%i", self.SectionNo]];
		if (self.ResponseLimits != nil) [s appendFormat: @"<ResponseLimits>%@</ResponseLimits>", [[self.ResponseLimits stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[ArcosQuestionBO class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		self.Narrative = nil;
		self.Tooltip = nil;
		self.ResponseLimits = nil;
		[super dealloc];
	}

@end
