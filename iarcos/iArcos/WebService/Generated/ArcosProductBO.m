/*
	ArcosProductBO.h
	The implementation of properties and methods for the ArcosProductBO object.
	Generated by SudzC.com
*/
#import "ArcosProductBO.h"

@implementation ArcosProductBO
	@synthesize IUR = _IUR;
	@synthesize ProductCode = _ProductCode;
	@synthesize Active = _Active;
	@synthesize L1Code = _L1Code;
	@synthesize L2Code = _L2Code;
	@synthesize L3Code = _L3Code;
	@synthesize L4Code = _L4Code;
	@synthesize L5Code = _L5Code;
	@synthesize SamplesAvailable = _SamplesAvailable;
	@synthesize StockOnHand = _StockOnHand;
	@synthesize Description = _Description;
	@synthesize CatalogCode = _CatalogCode;
	@synthesize EAN = _EAN;
	@synthesize PackEAN = _PackEAN;
	@synthesize OrderPadDetails = _OrderPadDetails;
	@synthesize SellBy = _SellBy;
	@synthesize BonusBy = _BonusBy;
	@synthesize CasesPerPallet = _CasesPerPallet;
	@synthesize PacksPerCase = _PacksPerCase;
	@synthesize UnitsPerPack = _UnitsPerPack;
	@synthesize MinimumOrderQty = _MinimumOrderQty;
	@synthesize MinimumUnitPrice = _MinimumUnitPrice;
	@synthesize StockAvailable = _StockAvailable;
	@synthesize StockOnOrder = _StockOnOrder;
	@synthesize StockDueDate = _StockDueDate;
	@synthesize ReplacementIUR = _ReplacementIUR;
	@synthesize UnitRRP = _UnitRRP;
	@synthesize UnitTradePrice = _UnitTradePrice;
	@synthesize UnitManufacturerPrice = _UnitManufacturerPrice;
	@synthesize UnitRevenueAmount = _UnitRevenueAmount;
	@synthesize VCIUR = _VCIUR;
	@synthesize BonusMinimum = _BonusMinimum;
	@synthesize BonusRequired = _BonusRequired;
	@synthesize BonusGiven = _BonusGiven;
	@synthesize AdvertFiles = _AdvertFiles;
	@synthesize RadioFiles = _RadioFiles;
	@synthesize DetailingFiles = _DetailingFiles;
	@synthesize POSFiles = _POSFiles;
	@synthesize PackFiles = _PackFiles;
	@synthesize BackGroundFile = _BackGroundFile;
	@synthesize PICodes = _PICodes;
	@synthesize ForDetailing = _ForDetailing;
	@synthesize MemoIUR = _MemoIUR;
	@synthesize wwwLink = _wwwLink;
	@synthesize ScoreProcedure = _ScoreProcedure;
	@synthesize ColumnDescription = _ColumnDescription;
	@synthesize ProductSize = _ProductSize;
	@synthesize ProductColour = _ProductColour;
	@synthesize ForSampling = _ForSampling;
	@synthesize ImageIUR = _ImageIUR;
	@synthesize RecordDistribution = _RecordDistribution;
	@synthesize FlagIUR = _FlagIUR;
	@synthesize Reference = _Reference;
	@synthesize BlockBonus = _BlockBonus;
	@synthesize MiscToggle = _MiscToggle;

	- (id) init
	{
		if(self = [super init])
		{
			self.ProductCode = nil;
			self.L1Code = nil;
			self.L2Code = nil;
			self.L3Code = nil;
			self.L4Code = nil;
			self.L5Code = nil;
			self.Description = nil;
			self.CatalogCode = nil;
			self.EAN = nil;
			self.PackEAN = nil;
			self.OrderPadDetails = nil;
			self.SellBy = nil;
			self.BonusBy = nil;
			self.MinimumUnitPrice = nil;
			self.StockDueDate = nil;
			self.UnitRRP = nil;
			self.UnitTradePrice = nil;
			self.UnitManufacturerPrice = nil;
			self.UnitRevenueAmount = nil;
			self.AdvertFiles = nil;
			self.RadioFiles = nil;
			self.DetailingFiles = nil;
			self.POSFiles = nil;
			self.PackFiles = nil;
			self.BackGroundFile = nil;
			self.PICodes = nil;
			self.wwwLink = nil;
			self.ScoreProcedure = nil;
			self.ColumnDescription = nil;
			self.ProductSize = nil;
			self.ProductColour = nil;
			self.Reference = nil;

		}
		return self;
	}

	+ (ArcosProductBO*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return [[[self alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.IUR = [[Soap getNodeValue: node withName: @"IUR"] intValue];
			self.ProductCode = [Soap getNodeValue: node withName: @"ProductCode"];
			self.Active = [[Soap getNodeValue: node withName: @"Active"] boolValue];
			self.L1Code = [Soap getNodeValue: node withName: @"L1Code"];
			self.L2Code = [Soap getNodeValue: node withName: @"L2Code"];
			self.L3Code = [Soap getNodeValue: node withName: @"L3Code"];
			self.L4Code = [Soap getNodeValue: node withName: @"L4Code"];
			self.L5Code = [Soap getNodeValue: node withName: @"L5Code"];
			self.SamplesAvailable = [[Soap getNodeValue: node withName: @"SamplesAvailable"] intValue];
			self.StockOnHand = [[Soap getNodeValue: node withName: @"StockOnHand"] intValue];
			self.Description = [Soap getNodeValue: node withName: @"Description"];
			self.CatalogCode = [Soap getNodeValue: node withName: @"CatalogCode"];
			self.EAN = [Soap getNodeValue: node withName: @"EAN"];
			self.PackEAN = [Soap getNodeValue: node withName: @"PackEAN"];
			self.OrderPadDetails = [Soap getNodeValue: node withName: @"OrderPadDetails"];
			self.SellBy = [Soap getNodeValue: node withName: @"SellBy"];
			self.BonusBy = [Soap getNodeValue: node withName: @"BonusBy"];
			self.CasesPerPallet = [[Soap getNodeValue: node withName: @"CasesPerPallet"] intValue];
			self.PacksPerCase = [[Soap getNodeValue: node withName: @"PacksPerCase"] intValue];
			self.UnitsPerPack = [[Soap getNodeValue: node withName: @"UnitsPerPack"] intValue];
			self.MinimumOrderQty = [[Soap getNodeValue: node withName: @"MinimumOrderQty"] intValue];
			self.MinimumUnitPrice = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"MinimumUnitPrice"]];
			self.StockAvailable = [[Soap getNodeValue: node withName: @"StockAvailable"] intValue];
			self.StockOnOrder = [[Soap getNodeValue: node withName: @"StockOnOrder"] intValue];
			self.StockDueDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"StockDueDate"]];
			self.ReplacementIUR = [[Soap getNodeValue: node withName: @"ReplacementIUR"] intValue];
			self.UnitRRP = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"UnitRRP"]];
			self.UnitTradePrice = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"UnitTradePrice"]];
			self.UnitManufacturerPrice = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"UnitManufacturerPrice"]];
			self.UnitRevenueAmount = [NSDecimalNumber decimalNumberWithString: [Soap getNodeValue: node withName: @"UnitRevenueAmount"]];
			self.VCIUR = [[Soap getNodeValue: node withName: @"VCIUR"] intValue];
			self.BonusMinimum = [[Soap getNodeValue: node withName: @"BonusMinimum"] intValue];
			self.BonusRequired = [[Soap getNodeValue: node withName: @"BonusRequired"] intValue];
			self.BonusGiven = [[Soap getNodeValue: node withName: @"BonusGiven"] intValue];
			self.AdvertFiles = [Soap getNodeValue: node withName: @"AdvertFiles"];
			self.RadioFiles = [Soap getNodeValue: node withName: @"RadioFiles"];
			self.DetailingFiles = [Soap getNodeValue: node withName: @"DetailingFiles"];
			self.POSFiles = [Soap getNodeValue: node withName: @"POSFiles"];
			self.PackFiles = [Soap getNodeValue: node withName: @"PackFiles"];
			self.BackGroundFile = [Soap getNodeValue: node withName: @"BackGroundFile"];
			self.PICodes = [Soap getNodeValue: node withName: @"PICodes"];
			self.ForDetailing = [[Soap getNodeValue: node withName: @"ForDetailing"] boolValue];
			self.MemoIUR = [[Soap getNodeValue: node withName: @"MemoIUR"] intValue];
			self.wwwLink = [Soap getNodeValue: node withName: @"wwwLink"];
			self.ScoreProcedure = [Soap getNodeValue: node withName: @"ScoreProcedure"];
			self.ColumnDescription = [Soap getNodeValue: node withName: @"ColumnDescription"];
			self.ProductSize = [Soap getNodeValue: node withName: @"ProductSize"];
			self.ProductColour = [Soap getNodeValue: node withName: @"ProductColour"];
			self.ForSampling = [[Soap getNodeValue: node withName: @"ForSampling"] boolValue];
			self.ImageIUR = [[Soap getNodeValue: node withName: @"ImageIUR"] intValue];
			self.RecordDistribution = [[Soap getNodeValue: node withName: @"RecordDistribution"] boolValue];
			self.FlagIUR = [[Soap getNodeValue: node withName: @"FlagIUR"] intValue];
			self.Reference = [Soap getNodeValue: node withName: @"Reference"];
			self.BlockBonus = [[Soap getNodeValue: node withName: @"BlockBonus"] boolValue];
			self.MiscToggle = [[Soap getNodeValue: node withName: @"MiscToggle"] boolValue];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"ProductBO"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<IUR>%@</IUR>", [NSString stringWithFormat: @"%i", self.IUR]];
		if (self.ProductCode != nil) [s appendFormat: @"<ProductCode>%@</ProductCode>", [[self.ProductCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<Active>%@</Active>", (self.Active)?@"true":@"false"];
		if (self.L1Code != nil) [s appendFormat: @"<L1Code>%@</L1Code>", [[self.L1Code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.L2Code != nil) [s appendFormat: @"<L2Code>%@</L2Code>", [[self.L2Code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.L3Code != nil) [s appendFormat: @"<L3Code>%@</L3Code>", [[self.L3Code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.L4Code != nil) [s appendFormat: @"<L4Code>%@</L4Code>", [[self.L4Code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.L5Code != nil) [s appendFormat: @"<L5Code>%@</L5Code>", [[self.L5Code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<SamplesAvailable>%@</SamplesAvailable>", [NSString stringWithFormat: @"%i", self.SamplesAvailable]];
		[s appendFormat: @"<StockOnHand>%@</StockOnHand>", [NSString stringWithFormat: @"%i", self.StockOnHand]];
		if (self.Description != nil) [s appendFormat: @"<Description>%@</Description>", [[self.Description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.CatalogCode != nil) [s appendFormat: @"<CatalogCode>%@</CatalogCode>", [[self.CatalogCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.EAN != nil) [s appendFormat: @"<EAN>%@</EAN>", [[self.EAN stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PackEAN != nil) [s appendFormat: @"<PackEAN>%@</PackEAN>", [[self.PackEAN stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.OrderPadDetails != nil) [s appendFormat: @"<OrderPadDetails>%@</OrderPadDetails>", [[self.OrderPadDetails stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.SellBy != nil) [s appendFormat: @"<SellBy>%@</SellBy>", [[self.SellBy stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BonusBy != nil) [s appendFormat: @"<BonusBy>%@</BonusBy>", [[self.BonusBy stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<CasesPerPallet>%@</CasesPerPallet>", [NSString stringWithFormat: @"%i", self.CasesPerPallet]];
		[s appendFormat: @"<PacksPerCase>%@</PacksPerCase>", [NSString stringWithFormat: @"%i", self.PacksPerCase]];
		[s appendFormat: @"<UnitsPerPack>%@</UnitsPerPack>", [NSString stringWithFormat: @"%i", self.UnitsPerPack]];
		[s appendFormat: @"<MinimumOrderQty>%@</MinimumOrderQty>", [NSString stringWithFormat: @"%i", self.MinimumOrderQty]];
		if (self.MinimumUnitPrice != nil) [s appendFormat: @"<MinimumUnitPrice>%@</MinimumUnitPrice>", [NSString stringWithFormat: @"%@", self.MinimumUnitPrice]];
		[s appendFormat: @"<StockAvailable>%@</StockAvailable>", [NSString stringWithFormat: @"%i", self.StockAvailable]];
		[s appendFormat: @"<StockOnOrder>%@</StockOnOrder>", [NSString stringWithFormat: @"%i", self.StockOnOrder]];
		if (self.StockDueDate != nil) [s appendFormat: @"<StockDueDate>%@</StockDueDate>", [Soap getDateString: self.StockDueDate]];
		[s appendFormat: @"<ReplacementIUR>%@</ReplacementIUR>", [NSString stringWithFormat: @"%i", self.ReplacementIUR]];
		if (self.UnitRRP != nil) [s appendFormat: @"<UnitRRP>%@</UnitRRP>", [NSString stringWithFormat: @"%@", self.UnitRRP]];
		if (self.UnitTradePrice != nil) [s appendFormat: @"<UnitTradePrice>%@</UnitTradePrice>", [NSString stringWithFormat: @"%@", self.UnitTradePrice]];
		if (self.UnitManufacturerPrice != nil) [s appendFormat: @"<UnitManufacturerPrice>%@</UnitManufacturerPrice>", [NSString stringWithFormat: @"%@", self.UnitManufacturerPrice]];
		if (self.UnitRevenueAmount != nil) [s appendFormat: @"<UnitRevenueAmount>%@</UnitRevenueAmount>", [NSString stringWithFormat: @"%@", self.UnitRevenueAmount]];
		[s appendFormat: @"<VCIUR>%@</VCIUR>", [NSString stringWithFormat: @"%i", self.VCIUR]];
		[s appendFormat: @"<BonusMinimum>%@</BonusMinimum>", [NSString stringWithFormat: @"%i", self.BonusMinimum]];
		[s appendFormat: @"<BonusRequired>%@</BonusRequired>", [NSString stringWithFormat: @"%i", self.BonusRequired]];
		[s appendFormat: @"<BonusGiven>%@</BonusGiven>", [NSString stringWithFormat: @"%i", self.BonusGiven]];
		if (self.AdvertFiles != nil) [s appendFormat: @"<AdvertFiles>%@</AdvertFiles>", [[self.AdvertFiles stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.RadioFiles != nil) [s appendFormat: @"<RadioFiles>%@</RadioFiles>", [[self.RadioFiles stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.DetailingFiles != nil) [s appendFormat: @"<DetailingFiles>%@</DetailingFiles>", [[self.DetailingFiles stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.POSFiles != nil) [s appendFormat: @"<POSFiles>%@</POSFiles>", [[self.POSFiles stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PackFiles != nil) [s appendFormat: @"<PackFiles>%@</PackFiles>", [[self.PackFiles stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.BackGroundFile != nil) [s appendFormat: @"<BackGroundFile>%@</BackGroundFile>", [[self.BackGroundFile stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.PICodes != nil) [s appendFormat: @"<PICodes>%@</PICodes>", [[self.PICodes stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<ForDetailing>%@</ForDetailing>", (self.ForDetailing)?@"true":@"false"];
		[s appendFormat: @"<MemoIUR>%@</MemoIUR>", [NSString stringWithFormat: @"%i", self.MemoIUR]];
		if (self.wwwLink != nil) [s appendFormat: @"<wwwLink>%@</wwwLink>", [[self.wwwLink stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ScoreProcedure != nil) [s appendFormat: @"<ScoreProcedure>%@</ScoreProcedure>", [[self.ScoreProcedure stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ColumnDescription != nil) [s appendFormat: @"<ColumnDescription>%@</ColumnDescription>", [[self.ColumnDescription stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ProductSize != nil) [s appendFormat: @"<ProductSize>%@</ProductSize>", [[self.ProductSize stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.ProductColour != nil) [s appendFormat: @"<ProductColour>%@</ProductColour>", [[self.ProductColour stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<ForSampling>%@</ForSampling>", (self.ForSampling)?@"true":@"false"];
		[s appendFormat: @"<ImageIUR>%@</ImageIUR>", [NSString stringWithFormat: @"%i", self.ImageIUR]];
		[s appendFormat: @"<RecordDistribution>%@</RecordDistribution>", (self.RecordDistribution)?@"true":@"false"];
		[s appendFormat: @"<FlagIUR>%@</FlagIUR>", [NSString stringWithFormat: @"%i", self.FlagIUR]];
		if (self.Reference != nil) [s appendFormat: @"<Reference>%@</Reference>", [[self.Reference stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<BlockBonus>%@</BlockBonus>", (self.BlockBonus)?@"true":@"false"];
		[s appendFormat: @"<MiscToggle>%@</MiscToggle>", (self.MiscToggle)?@"true":@"false"];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[ArcosProductBO class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		self.ProductCode = nil;
		self.L1Code = nil;
		self.L2Code = nil;
		self.L3Code = nil;
		self.L4Code = nil;
		self.L5Code = nil;
		self.Description = nil;
		self.CatalogCode = nil;
		self.EAN = nil;
		self.PackEAN = nil;
		self.OrderPadDetails = nil;
		self.SellBy = nil;
		self.BonusBy = nil;
		self.MinimumUnitPrice = nil;
		self.StockDueDate = nil;
		self.UnitRRP = nil;
		self.UnitTradePrice = nil;
		self.UnitManufacturerPrice = nil;
		self.UnitRevenueAmount = nil;
		self.AdvertFiles = nil;
		self.RadioFiles = nil;
		self.DetailingFiles = nil;
		self.POSFiles = nil;
		self.PackFiles = nil;
		self.BackGroundFile = nil;
		self.PICodes = nil;
		self.wwwLink = nil;
		self.ScoreProcedure = nil;
		self.ColumnDescription = nil;
		self.ProductSize = nil;
		self.ProductColour = nil;
		self.Reference = nil;
		[super dealloc];
	}

@end
